{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport fetch from 'node-fetch';\nimport { setContext } from 'apollo-link-context';\nconst httpLink = createHttpLink({\n  uri: 'https://roberto-crmgraphql.herokuapp.com/',\n  fetch\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // Leer el storage almacenado\n  const token = localStorage.getItem('token'); // console.log(token);\n\n  return {\n    headers: _objectSpread({}, headers, {\n      authorization: token ? `Bearer ${token}` : ''\n    })\n  };\n});\nconst client = new ApolloClient({\n  connectToDevTools: true,\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n});\nexport default client;","map":null,"metadata":{},"sourceType":"module"}