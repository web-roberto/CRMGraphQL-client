{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nvar __jsx = React.createElement;\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React, { useState, useEffect } from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Swal from 'sweetalert2';\nvar ACTUALIZAR_PEDIDO = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    mutation actualizarPedido($id: ID!, $input: PedidoInput ) {\\n        actualizarPedido(id: $id, input: $input) {\\n            estado\\n        }\\n    }\\n\"])));\nvar ELIMINAR_PEDIDO = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    mutation eliminarPedido($id: ID!) {\\n        eliminarPedido(id: $id) \\n    }\\n\"])));\nvar OBTENER_PEDIDOS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  query obtenerPedidosVendedor {\\n      obtenerPedidosVendedor {\\n        id\\n      }\\n  }\\n\"])));\n\nvar Pedido = function Pedido(_ref) {\n  var pedido = _ref.pedido;\n  var id = pedido.id,\n      total = pedido.total,\n      _pedido$cliente = pedido.cliente,\n      nombre = _pedido$cliente.nombre,\n      apellido = _pedido$cliente.apellido,\n      telefono = _pedido$cliente.telefono,\n      email = _pedido$cliente.email,\n      estado = pedido.estado,\n      cliente = pedido.cliente; // Mutation para cambiar el estado de un pedido\n\n  var _useMutation = useMutation(ACTUALIZAR_PEDIDO),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      actualizarPedido = _useMutation2[0];\n\n  var _useMutation3 = useMutation(ELIMINAR_PEDIDO, {\n    update: function update(cache) {\n      var _cache$readQuery = cache.readQuery({\n        query: OBTENER_PEDIDOS\n      }),\n          obtenerPedidosVendedor = _cache$readQuery.obtenerPedidosVendedor;\n\n      cache.writeQuery({\n        query: OBTENER_PEDIDOS,\n        data: {\n          obtenerPedidosVendedor: obtenerPedidosVendedor.filter(function (pedido) {\n            return pedido.id !== id;\n          })\n        }\n      });\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      eliminarPedido = _useMutation4[0]; // console.log(pedido)\n\n\n  var _useState = useState(estado),\n      estadoPedido = _useState[0],\n      setEstadoPedido = _useState[1];\n\n  var _useState2 = useState(''),\n      clase = _useState2[0],\n      setClase = _useState2[1];\n\n  useEffect(function () {\n    if (estadoPedido) {\n      setEstadoPedido(estadoPedido);\n    }\n\n    clasePedido();\n  }, [estadoPedido]); // Función que modifica el color del pedido de acuerdo a su estado\n\n  var clasePedido = function clasePedido() {\n    if (estadoPedido === 'PENDIENTE') {\n      setClase('border-yellow-500');\n    } else if (estadoPedido === 'COMPLETADO') {\n      setClase('border-green-500');\n    } else {\n      setClase('border-red-800');\n    }\n  };\n\n  var cambiarEstadoPedido = function cambiarEstadoPedido(nuevoEstado) {\n    var _await$actualizarPedi, data;\n\n    return _regeneratorRuntime().async(function cambiarEstadoPedido$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime().awrap(actualizarPedido({\n              variables: {\n                id: id,\n                input: {\n                  estado: nuevoEstado,\n                  cliente: cliente.id\n                }\n              }\n            }));\n\n          case 3:\n            _await$actualizarPedi = _context.sent;\n            data = _await$actualizarPedi.data;\n            setEstadoPedido(data.actualizarPedido.estado);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var confirmarEliminarPedido = function confirmarEliminarPedido() {\n    Swal.fire({\n      title: '¿Deseas eliminar a este pedido?',\n      text: \"Esta acción no se puede deshacer\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Si, Eliminar',\n      cancelButtonText: 'No, Cancelar'\n    }).then(function _callee(result) {\n      var data;\n      return _regeneratorRuntime().async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!result.value) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime().awrap(eliminarPedido({\n                variables: {\n                  id: id\n                }\n              }));\n\n            case 4:\n              data = _context2.sent;\n              Swal.fire('Eliminado', data.eliminarPedido, 'success');\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 8]], Promise);\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \" \".concat(clase, \" border-t-4 mt-4 bg-white rounded p-6 md:grid md:grid-cols-2 md:gap-4 shadow-lg\")\n  }, __jsx(\"div\", null, __jsx(\"p\", {\n    className: \"font-bold text-gray-800\"\n  }, \"Cliente: \", nombre, \" \", apellido, \" \"), email && __jsx(\"p\", {\n    className: \"flex items-center my-2\"\n  }, __jsx(\"svg\", {\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"2\",\n    viewBox: \"0 0 24 24\",\n    className: \"w-4 h-4 mr-2\"\n  }, __jsx(\"path\", {\n    d: \"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n  })), email), telefono && __jsx(\"p\", {\n    className: \"flex items-center my-2\"\n  }, __jsx(\"svg\", {\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"2\",\n    viewBox: \"0 0 24 24\",\n    className: \"w-4 h-4 mr-2\"\n  }, __jsx(\"path\", {\n    d: \"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"\n  })), telefono), __jsx(\"h2\", {\n    className: \"text-gray-800 font-bold mt-10\"\n  }, \"Estado Pedido:\"), __jsx(\"select\", {\n    className: \"mt-2 appearance-none bg-blue-600 border border-blue-600 text-white p-2 text-center rounded leading-tight focus:outline-none focus:bg-blue-600 focus:border-blue-500 uppercase text-xs font-bold \",\n    value: estadoPedido,\n    onChange: function onChange(e) {\n      return cambiarEstadoPedido(e.target.value);\n    }\n  }, __jsx(\"option\", {\n    value: \"COMPLETADO\"\n  }, \"COMPLETADO\"), __jsx(\"option\", {\n    value: \"PENDIENTE\"\n  }, \"PENDIENTE\"), __jsx(\"option\", {\n    value: \"CANCELADO\"\n  }, \"CANCELADO\"))), __jsx(\"div\", null, __jsx(\"h2\", {\n    className: \"text-gray-800 font-bold mt-2\"\n  }, \"Resumen del Pedido\"), pedido.pedido.map(function (articulo) {\n    return __jsx(\"div\", {\n      key: articulo.id,\n      className: \"mt-4\"\n    }, __jsx(\"p\", {\n      className: \"text-sm text-gray-600\"\n    }, \"Producto: \", articulo.nombre, \" \"), __jsx(\"p\", {\n      className: \"text-sm text-gray-600\"\n    }, \"Cantidad: \", articulo.cantidad, \" \"));\n  }), __jsx(\"p\", {\n    className: \"text-gray-800 mt-3 font-bold \"\n  }, \"Total a pagar:\", __jsx(\"span\", {\n    className: \"font-light\"\n  }, \" $ \", total)), __jsx(\"button\", {\n    className: \"uppercase text-xs font-bold  flex items-center mt-4 bg-red-800 px-5 py-2 inline-block text-white rounded leading-tight\",\n    onClick: function onClick() {\n      return confirmarEliminarPedido();\n    }\n  }, \"Eliminar Pedido\", __jsx(\"svg\", {\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"2\",\n    viewBox: \"0 0 24 24\",\n    className: \"w-4 h-4 ml-2\"\n  }, __jsx(\"path\", {\n    d: \"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\n  })))));\n};\n\nexport default Pedido;","map":null,"metadata":{},"sourceType":"module"}