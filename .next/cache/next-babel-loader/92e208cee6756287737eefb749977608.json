{"ast":null,"code":"var _jsxFileName = \"C:\\\\DESPLIEGUES\\\\APLICACIONES-EN-GITHUB\\\\portolio-apps\\\\web-development\\\\jp-crm-graphql\\\\crmcliente\\\\components\\\\pedidos\\\\AsignarCliente.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react';\nimport Select from 'react-select';\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\nconst OBTENER_CLIENTES_USUARIO = gql`\n    query obtenerClientesVendedor {\n        obtenerClientesVendedor {\n            id\n            nombre\n            apellido\n            empresa\n            email\n        }\n    }\n`;\n\nconst AsignarCliente = () => {\n  const {\n    0: cliente,\n    1: setCliente\n  } = useState([]); // Context de pedidos\n\n  const pedidoContext = useContext(PedidoContext);\n  const {\n    agregarCliente\n  } = pedidoContext; // Consultar la base de datos\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(OBTENER_CLIENTES_USUARIO); // console.log(data)\n  // console.log(loading)\n  // console.log(error)\n\n  useEffect(() => {\n    agregarCliente(cliente);\n  }, [cliente]);\n\n  const seleccionarCliente = clientes => {\n    setCliente(clientes);\n  }; // Resultados de la consulta\n\n\n  if (loading) return null;\n  const {\n    obtenerClientesVendedor\n  } = data;\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"1.- Asigna un Cliente al pedido\"), __jsx(Select, {\n    className: \"mt-3\",\n    options: obtenerClientesVendedor,\n    onChange: opcion => seleccionarCliente(opcion),\n    getOptionValue: opciones => opciones.id,\n    getOptionLabel: opciones => opciones.nombre,\n    placeholder: \"Busque o Seleccione el Cliente\",\n    noOptionsMessage: () => \"No hay resultados\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AsignarCliente;","map":{"version":3,"names":["React","useState","useEffect","useContext","Select","gql","useQuery","PedidoContext","OBTENER_CLIENTES_USUARIO","AsignarCliente","cliente","setCliente","pedidoContext","agregarCliente","data","loading","error","seleccionarCliente","clientes","obtenerClientesVendedor","opcion","opciones","id","nombre"],"sources":["C:/DESPLIEGUES/APLICACIONES-EN-GITHUB/portolio-apps/web-development/jp-crm-graphql/crmcliente/components/pedidos/AsignarCliente.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport Select from 'react-select'\nimport { gql, useQuery } from '@apollo/client';\nimport PedidoContext from '../../context/pedidos/PedidoContext';\n\nconst OBTENER_CLIENTES_USUARIO = gql`\n    query obtenerClientesVendedor {\n        obtenerClientesVendedor {\n            id\n            nombre\n            apellido\n            empresa\n            email\n        }\n    }\n`;\n\nconst AsignarCliente = () => {\n\n    const [ cliente, setCliente ] = useState([]);\n\n    // Context de pedidos\n    const pedidoContext = useContext(PedidoContext);\n    const { agregarCliente} = pedidoContext;\n    \n\n    // Consultar la base de datos\n    const { data, loading, error } = useQuery(OBTENER_CLIENTES_USUARIO);\n\n    // console.log(data)\n    // console.log(loading)\n    // console.log(error)\n\n    useEffect(() => {\n        agregarCliente(cliente);\n    }, [cliente])\n\n    const seleccionarCliente = clientes => {\n        setCliente(clientes);\n    }\n\n    // Resultados de la consulta\n    if(loading) return null;\n\n    const { obtenerClientesVendedor } = data;\n\n    return ( \n\n        <>\n            <p className=\"mt-10 my-2 bg-white border-l-4 border-gray-800 text-gray-700 p-2 text-sm font-bold\">1.- Asigna un Cliente al pedido</p>\n            <Select\n                className=\"mt-3\"\n                options={ obtenerClientesVendedor }\n                onChange={ opcion => seleccionarCliente(opcion) }\n                getOptionValue={ opciones => opciones.id }\n                getOptionLabel={ opciones => opciones.nombre }\n                placeholder=\"Busque o Seleccione el Cliente\"\n                noOptionsMessage={() => \"No hay resultados\"}\n            />\n\n        </>\n     );\n}\n \nexport default AsignarCliente;"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA,MAAMC,wBAAwB,GAAGH,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,MAAMI,cAAc,GAAG,MAAM;EAEzB,MAAM;IAAA,GAAEC,OAAF;IAAA,GAAWC;EAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC,CAFyB,CAIzB;;EACA,MAAMW,aAAa,GAAGT,UAAU,CAACI,aAAD,CAAhC;EACA,MAAM;IAAEM;EAAF,IAAoBD,aAA1B,CANyB,CASzB;;EACA,MAAM;IAAEE,IAAF;IAAQC,OAAR;IAAiBC;EAAjB,IAA2BV,QAAQ,CAACE,wBAAD,CAAzC,CAVyB,CAYzB;EACA;EACA;;EAEAN,SAAS,CAAC,MAAM;IACZW,cAAc,CAACH,OAAD,CAAd;EACH,CAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;EAIA,MAAMO,kBAAkB,GAAGC,QAAQ,IAAI;IACnCP,UAAU,CAACO,QAAD,CAAV;EACH,CAFD,CApByB,CAwBzB;;;EACA,IAAGH,OAAH,EAAY,OAAO,IAAP;EAEZ,MAAM;IAAEI;EAAF,IAA8BL,IAApC;EAEA,OAEI,4BACI;IAAG,SAAS,EAAC,oFAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qCADJ,EAEI,MAAC,MAAD;IACI,SAAS,EAAC,MADd;IAEI,OAAO,EAAGK,uBAFd;IAGI,QAAQ,EAAGC,MAAM,IAAIH,kBAAkB,CAACG,MAAD,CAH3C;IAII,cAAc,EAAGC,QAAQ,IAAIA,QAAQ,CAACC,EAJ1C;IAKI,cAAc,EAAGD,QAAQ,IAAIA,QAAQ,CAACE,MAL1C;IAMI,WAAW,EAAC,gCANhB;IAOI,gBAAgB,EAAE,MAAM,mBAP5B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,CAFJ;AAgBH,CA7CD;;AA+CA,eAAed,cAAf"},"metadata":{},"sourceType":"module"}