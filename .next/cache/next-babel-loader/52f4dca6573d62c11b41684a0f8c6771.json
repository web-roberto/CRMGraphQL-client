{"ast":null,"code":"var _jsxFileName = \"C:\\\\DESPLIEGUES\\\\APLICACIONES-EN-GITHUB\\\\portolio-apps\\\\web-development\\\\jp-crm-graphql\\\\crmcliente\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ApolloProvider } from '@apollo/client';\nimport client from '../config/apollo';\nimport PedidoState from '../context/pedidos/PedidoState';\nconst [useLang, setLang] = useState('En'); //(useLang == 'En') ? <p>English Text Here</p> : <p>French Text Here</p>\n//distribuirlo como useContext en toda la aplicacion?\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(PedidoState, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default MyApp;","map":{"version":3,"names":["ApolloProvider","client","PedidoState","useLang","setLang","useState","MyApp","Component","pageProps"],"sources":["C:/DESPLIEGUES/APLICACIONES-EN-GITHUB/portolio-apps/web-development/jp-crm-graphql/crmcliente/pages/_app.js"],"sourcesContent":["import { ApolloProviderÂ } from '@apollo/client'\nimport client from '../config/apollo';\nimport PedidoState from '../context/pedidos/PedidoState'\nconst [useLang, setLang] = useState('En')\n\n//(useLang == 'En') ? <p>English Text Here</p> : <p>French Text Here</p>\n//distribuirlo como useContext en toda la aplicacion?\nconst MyApp = ({ Component, pageProps}) => {\n    return(\n        <ApolloProvider client={client}>\n            <PedidoState>\n                <Component {...pageProps} />\n            </PedidoState>\n        </ApolloProvider>\n    )\n}\n\nexport default MyApp;"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,gBAA/B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,MAAM,CAACC,OAAD,EAAUC,OAAV,IAAqBC,QAAQ,CAAC,IAAD,CAAnC,C,CAEA;AACA;;AACA,MAAMC,KAAK,GAAG,CAAC;EAAEC,SAAF;EAAaC;AAAb,CAAD,KAA6B;EACvC,OACI,MAAC,cAAD;IAAgB,MAAM,EAAEP,MAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,MAAC,WAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,MAAC,SAAD,eAAeO,SAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GADJ,CADJ,CADJ;AAOH,CARD;;AAUA,eAAeF,KAAf"},"metadata":{},"sourceType":"module"}