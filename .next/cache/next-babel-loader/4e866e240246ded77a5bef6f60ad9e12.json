{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useReducer } from 'react';\nimport PedidoContext from './PedidoContext';\nimport PedidoReducer from './PedidoReducer';\nimport { SELECCIONAR_CLIENTE, SELECCIONAR_PRODUCTO, CANTIDAD_PRODUCTOS, ACTUALIZAR_TOTAL } from '../../types';\n\nvar PedidoState = function PedidoState(_ref) {\n  var children = _ref.children;\n  // State de Pedidos\n  var initialState = {\n    cliente: {},\n    productos: [],\n    total: 0\n  };\n\n  var _useReducer = useReducer(PedidoReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // Modifica el Cliente\n\n\n  var agregarCliente = function agregarCliente(cliente) {\n    // console.log(cliente);\n    dispatch({\n      type: SELECCIONAR_CLIENTE,\n      payload: cliente\n    });\n  }; // Modifica los productos\n\n\n  var agregarProducto = function agregarProducto(productosSeleccionados) {\n    var nuevoState;\n\n    if (state.productos.length > 0) {\n      // Tomar del segundo arreglo, una copia para asignarlo al primero\n      nuevoState = productosSeleccionados.map(function (producto) {\n        var nuevoObjeto = state.productos.find(function (productoState) {\n          return productoState.id === producto.id;\n        });\n        return _objectSpread({}, producto, {}, nuevoObjeto);\n      });\n    } else {\n      nuevoState = productosSeleccionados;\n    }\n\n    dispatch({\n      type: SELECCIONAR_PRODUCTO,\n      payload: nuevoState\n    });\n  }; // Modifica las cantidades de los productos\n\n\n  var cantidadProductos = function cantidadProductos(nuevoProducto) {\n    dispatch({\n      type: CANTIDAD_PRODUCTOS,\n      payload: nuevoProducto\n    });\n  };\n\n  var actualizarTotal = function actualizarTotal() {\n    dispatch({\n      type: ACTUALIZAR_TOTAL\n    });\n  };\n\n  return __jsx(PedidoContext.Provider, {\n    value: {\n      cliente: state.cliente,\n      productos: state.productos,\n      total: state.total,\n      agregarCliente: agregarCliente,\n      agregarProducto: agregarProducto,\n      cantidadProductos: cantidadProductos,\n      actualizarTotal: actualizarTotal\n    }\n  }, \" \", children);\n};\n\nexport default PedidoState;","map":null,"metadata":{},"sourceType":"module"}