{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport Layout from '../components/Layout';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { gql, useQuery } from '@apollo/client';\nconst MEJORES_CLIENTES = gql`\n    query mejoresClientes {\n            mejoresClientes {\n            cliente {\n                nombre\n                empresa\n            }\n            total\n        }\n    }\n`;\n\nconst MejoresClientes = () => {\n  const {\n    data,\n    loading,\n    error,\n    startPolling,\n    stopPolling\n  } = useQuery(MEJORES_CLIENTES);\n  useEffect(() => {\n    startPolling(1000);\n    return () => {\n      stopPolling();\n    };\n  }, [startPolling, stopPolling]);\n  if (loading) return 'cargando...';\n  console.log(data);\n  const {\n    mejoresClientes\n  } = data;\n  const clienteGrafica = [];\n  mejoresClientes.map((cliente, index) => {\n    clienteGrafica[index] = _objectSpread({}, cliente.cliente[0], {\n      total: cliente.total\n    });\n  });\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light\"\n  }, \"Mejores Clientes\"), __jsx(BarChart, {\n    className: \"mt-10\",\n    width: 600,\n    height: 500,\n    data: clienteGrafica,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    }\n  }, __jsx(CartesianGrid, {\n    strokeDasharray: \"3 3\"\n  }), __jsx(XAxis, {\n    dataKey: \"nombre\"\n  }), __jsx(YAxis, null), __jsx(Tooltip, null), __jsx(Legend, null), __jsx(Bar, {\n    dataKey: \"total\",\n    fill: \"#3182CE\"\n  })));\n};\n\nexport default MejoresClientes;","map":null,"metadata":{},"sourceType":"module"}