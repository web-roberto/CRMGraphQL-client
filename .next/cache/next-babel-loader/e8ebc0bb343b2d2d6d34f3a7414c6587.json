{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Layout from '../../components/Layout';\nimport { useRouter } from 'next/router';\nimport { gql, useQuery, useMutation } from '@apollo/client';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Swal from 'sweetalert2';\nconst OBTENER_PRODUCTO = gql`\n    query obtenerProducto($id: ID!) {\n        obtenerProducto(id: $id) {\n            nombre\n            precio\n            existencia\n        }\n    }\n`;\nconst ACTUALIZAR_PRODUCTO = gql`\n    mutation actualizarProducto($id: ID!, $input: ProductoInput) {\n            actualizarProducto(id:$id, input:$input) {\n                id\n                nombre\n                existencia\n                precio\n            }\n    }\n`;\n\nconst EditarProducto = () => {\n  const router = useRouter();\n  const {\n    query: {\n      id\n    }\n  } = router; // console.log(id)\n  // Consultar para obtener el producto\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(OBTENER_PRODUCTO, {\n    variables: {\n      id\n    }\n  }); // Mutation para modificar el producto\n\n  const [actualizarProducto] = useMutation(ACTUALIZAR_PRODUCTO); // Schema de validación\n\n  const schemaValidacion = Yup.object({\n    nombre: Yup.string().required('El nombre del producto es obligatorio'),\n    existencia: Yup.number().required('Agrega la cantidad disponible').positive('No se aceptan números negativos').integer('La existencia deben ser números enteros'),\n    precio: Yup.number().required('El precio es obligatorio').positive('No se aceptan números negativos')\n  }); // console.log(data)\n  // console.log(loading)\n  // console.log(error)\n\n  if (loading) return 'Cargando...';\n\n  if (!data) {\n    return 'Acción no permitida';\n  }\n\n  const actualizarInfoProducto = async valores => {\n    // console.log(valores);\n    const {\n      nombre,\n      existencia,\n      precio\n    } = valores;\n\n    try {\n      const {\n        data\n      } = await actualizarProducto({\n        variables: {\n          id,\n          input: {\n            nombre,\n            existencia,\n            precio\n          }\n        }\n      }); // console.log(data);\n      // Redirgir hacia productos\n\n      router.push('/productos'); // Mostrar una alerta\n\n      Swal.fire('Correcto', 'El producto se actualizó correctamente', 'success');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const {\n    obtenerProducto\n  } = data;\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light\"\n  }, \"Editar Producto\"), __jsx(\"div\", {\n    className: \"flex justify-center mt-5\"\n  }, __jsx(\"div\", {\n    className: \"w-full max-w-lg\"\n  }, __jsx(Formik, {\n    enableReinitialize: true,\n    initialValues: obtenerProducto,\n    validationSchema: schemaValidacion,\n    onSubmit: valores => {\n      actualizarInfoProducto(valores);\n    }\n  }, props => {\n    return __jsx(\"form\", {\n      className: \"bg-white shadow-md px-8 pt-6 pb-8 mb-4\",\n      onSubmit: props.handleSubmit\n    }, __jsx(\"div\", {\n      className: \"mb-4\"\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"nombre\"\n    }, \"Nombre\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"nombre\",\n      type: \"text\",\n      placeholder: \"Nombre Producto\",\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.nombre\n    })), props.touched.nombre && props.errors.nombre ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n    }, __jsx(\"p\", {\n      className: \"font-bold\"\n    }, \"Error\"), __jsx(\"p\", null, props.errors.nombre)) : null, __jsx(\"div\", {\n      className: \"mb-4\"\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"existencia\"\n    }, \"Cantidad Disponible\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"existencia\",\n      type: \"number\",\n      placeholder: \"Cantidad Disponible\",\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.existencia\n    })), props.touched.existencia && props.errors.existencia ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n    }, __jsx(\"p\", {\n      className: \"font-bold\"\n    }, \"Error\"), __jsx(\"p\", null, props.errors.existencia)) : null, __jsx(\"div\", {\n      className: \"mb-4\"\n    }, __jsx(\"label\", {\n      className: \"block text-gray-700 text-sm font-bold mb-2\",\n      htmlFor: \"precio\"\n    }, \"Precio\"), __jsx(\"input\", {\n      className: \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n      id: \"precio\",\n      type: \"number\",\n      placeholder: \"Precio Producto\",\n      onChange: props.handleChange,\n      onBlur: props.handleBlur,\n      value: props.values.precio\n    })), props.touched.precio && props.errors.precio ? __jsx(\"div\", {\n      className: \"my-2 bg-red-100 border-l-4 border-red-500 text-red-700 p-4\"\n    }, __jsx(\"p\", {\n      className: \"font-bold\"\n    }, \"Error\"), __jsx(\"p\", null, props.errors.precio)) : null, __jsx(\"input\", {\n      type: \"submit\",\n      className: \"bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900\",\n      value: \"Guardar Cambios\"\n    }));\n  }))));\n};\n\nexport default EditarProducto;","map":null,"metadata":{},"sourceType":"module"}