{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport Layout from '../components/Layout';\nimport AsignarCliente from '../components/pedidos/AsignarCliente';\nimport AsignarProductos from '../components/pedidos/AsignarProductos';\nimport ResumenPedido from '../components/pedidos/ResumenPedido';\nimport Total from '../components/pedidos/Total';\nimport { gql, useMutation } from '@apollo/client';\nimport { useRouter } from 'next/router';\nimport Swal from 'sweetalert2'; // Context de pedidos\n\nimport PedidoContext from '../context/pedidos/PedidoContext';\nconst NUEVO_PEDIDO = gql`\n    mutation nuevoPedido($input: PedidoInput){\n        nuevoPedido(input: $input) {\n            id\n        }\n    }\n`;\nconst OBTENER_PEDIDOS = gql`\n  query obtenerPedidosVendedor {\n      obtenerPedidosVendedor {\n        id\n        pedido {\n          id\n          cantidad\n          nombre\n        }\n        cliente {\n          id\n          nombre\n          apellido\n          email\n          telefono\n        }\n        vendedor\n        total\n        estado\n      }\n  }\n`;\n\nconst NuevoPedido = () => {\n  const router = useRouter();\n  const {\n    0: mensaje,\n    1: setMensaje\n  } = useState(null); // Utilizar context y extraer sus funciones y valores\n\n  const pedidoContext = useContext(PedidoContext);\n  const {\n    cliente,\n    productos,\n    total\n  } = pedidoContext; // Mutation para crear un nuevo pedido\n\n  const [nuevoPedido] = useMutation(NUEVO_PEDIDO, {\n    update(cache, {\n      data: {\n        nuevoPedido\n      }\n    }) {\n      const {\n        obtenerPedidosVendedor\n      } = cache.readQuery({\n        query: OBTENER_PEDIDOS\n      });\n      cache.writeQuery({\n        query: OBTENER_PEDIDOS,\n        data: {\n          obtenerPedidosVendedor: [...obtenerPedidosVendedor, nuevoPedido]\n        }\n      });\n    }\n\n  }); // TODO ACTUALIZAR EL CACHE\n\n  const validarPedido = () => {\n    return !productos.every(producto => producto.cantidad > 0) || total === 0 || cliente.length === 0 ? \" opacity-50 cursor-not-allowed \" : \"\";\n  };\n\n  const crearNuevoPedido = async () => {\n    const {\n      id\n    } = cliente; // Remover lo no deseado de productos\n\n    const pedido = productos.map(_ref => {\n      let {\n        __typename,\n        existencia\n      } = _ref,\n          producto = _objectWithoutProperties(_ref, [\"__typename\", \"existencia\"]);\n\n      return producto;\n    }); // console.log(pedido);\n\n    try {\n      const {\n        data\n      } = await nuevoPedido({\n        variables: {\n          input: {\n            cliente: id,\n            total,\n            pedido\n          }\n        }\n      }); // console.log(data);\n      // Redireccionar\n\n      router.push('/pedidos'); // Mostrar alerta\n\n      Swal.fire('Correcto', 'El pedido se registrÃ³ correctamente', 'success');\n    } catch (error) {\n      setMensaje(error.message.replace('GraphQL error: ', ''));\n      setTimeout(() => {\n        setMensaje(null);\n      }, 3000);\n    }\n  };\n\n  const mostrarMensaje = () => {\n    return __jsx(\"div\", {\n      className: \"bg-white py-2 px-3 w-full my-3 max-w-sm text-center mx-auto \"\n    }, __jsx(\"p\", null, mensaje, \" \"));\n  };\n\n  return __jsx(Layout, null, __jsx(\"h1\", {\n    className: \"text-2xl text-gray-800 font-light\"\n  }, \"Crear Nuevo Pedido\"), mensaje && mostrarMensaje(), __jsx(\"div\", {\n    className: \"flex justify-center mt-5\"\n  }, __jsx(\"div\", {\n    className: \"w-full max-w-lg\"\n  }, __jsx(AsignarCliente, null), __jsx(AsignarProductos, null), __jsx(ResumenPedido, null), __jsx(Total, null), __jsx(\"button\", {\n    type: \"button\",\n    className: ` bg-gray-800 w-full mt-5 p-2 text-white uppercase font-bold hover:bg-gray-900 ${validarPedido()} `,\n    onClick: () => crearNuevoPedido()\n  }, \"Registrar Pedido\"))));\n};\n\nexport default NuevoPedido;","map":null,"metadata":{},"sourceType":"module"}